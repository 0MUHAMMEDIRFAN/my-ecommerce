<section class="py-5">
    <div class="container">
        <!-- Page Header -->
        <div class="row mb-5">
            <div class="col-12 text-center">
                <h1 class="fw-bold mb-3">Our Products</h1>
                <p class="text-muted">Discover our amazing collection of quality products</p>
            </div>
        </div>

        <!-- Search and Filter Bar -->
        <div class="row mb-4">
            <div class="col-lg-6">
                <div class="input-group">
                    <span class="input-group-text bg-light border-end-0">
                        <i class="fas fa-search text-muted"></i>
                    </span>
                    <input type="text" class="form-control border-start-0" placeholder="Search products..." 
                           id="searchInput" onkeyup="filterProducts()">
                </div>
            </div>
            <div class="col-lg-3">
                <select class="form-select" id="categoryFilter" onchange="filterProducts()">
                    <option value="">All Categories</option>
                    <!-- Categories will be populated dynamically -->
                </select>
            </div>
            <div class="col-lg-3">
                <select class="form-select" id="sortFilter" onchange="sortProducts()">
                    <option value="">Sort by</option>
                    <option value="name">Name (A-Z)</option>
                    <option value="price-low">Price (Low to High)</option>
                    <option value="price-high">Price (High to Low)</option>
                </select>
            </div>
        </div>

        <!-- Products Grid -->
        <div class="row g-4" id="productsContainer">
            {{#each products}}
            <div class="col-xl-3 col-lg-4 col-md-6 product-item" data-category="{{this.Category}}" data-name="{{this.Name}}" data-price="{{this.Price}}">
                <div class="card h-100 border-0 shadow-sm product-card">
                    <div class="position-relative overflow-hidden">
                        <img class="card-img-top" src="https://picsum.photos/300/300?random={{this._id}}" 
                             alt="{{this.Name}}" style="height: 250px; object-fit: cover;"
                             loading="lazy">
                        <div class="overlay position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center">
                            <button class="btn btn-light btn-sm me-2" onclick="viewProduct('{{this._id}}')">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn btn-light btn-sm" onclick="addToWishlist('{{this._id}}')">
                                <i class="far fa-heart"></i>
                            </button>
                        </div>
                    </div>
                    <div class="card-body d-flex flex-column">
                        <div class="mb-2">
                            <span class="badge bg-light text-dark small">{{this.Category}}</span>
                        </div>
                        <h5 class="card-title fw-bold mb-2">{{this.Name}}</h5>
                        <p class="card-text text-muted flex-grow-1">{{this.Description}}</p>
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="h5 text-primary fw-bold mb-0">${{this.Price}}</span>
                            <button onclick="AddToCart('{{this._id}}')" class="btn btn-primary btn-sm add-to-cart-btn">
                                <span class="btn-text">
                                    <i class="fas fa-shopping-cart me-1"></i>Add to Cart
                                </span>
                                <span class="btn-loading d-none">
                                    <span class="spinner"></span>Adding...
                                </span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            {{/each}}
        </div>

        <!-- No Products Found Message -->
        <div class="row d-none" id="noProductsMessage">
            <div class="col-12 text-center py-5">
                <i class="fas fa-search fa-3x text-muted mb-3"></i>
                <h3 class="text-muted">No products found</h3>
                <p class="text-muted">Try adjusting your search or filter criteria</p>
            </div>
        </div>
    </div>
</section>

<!-- Product Quick View Modal -->
<div class="modal fade" id="productModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Product Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="modalContent">
                <!-- Product details will be loaded here -->
            </div>
        </div>
    </div>
</div>

<script>
    let allProducts = [];

    // Initialize products array and categories
    document.addEventListener('DOMContentLoaded', function() {
        // Populate products array
        {{#each products}}
        allProducts.push({
            id: '{{this._id}}',
            name: '{{this.Name}}',
            category: '{{this.Category}}',
            price: parseFloat('{{this.Price}}'),
            description: '{{this.Description}}'
        });
        {{/each}}

        // Populate categories
        const categories = [...new Set(allProducts.map(p => p.category))];
        const categoryFilter = document.getElementById('categoryFilter');
        categories.forEach(category => {
            const option = document.createElement('option');
            option.value = category;
            option.textContent = category;
            categoryFilter.appendChild(option);
        });

        // Add scroll animations
        observeProducts();
    });

    async function AddToCart(productId) {
        const button = event.target.closest('.add-to-cart-btn');
        const btnText = button.querySelector('.btn-text');
        const btnLoading = button.querySelector('.btn-loading');
        
        // Show loading state
        btnText.classList.add('d-none');
        btnLoading.classList.remove('d-none');
        button.disabled = true;

        try {
            const response = await fetch('/add-to-cart/' + productId, {
                method: 'GET'
            });
            
            if (response.status === 401) {
                window.location.href = "/login";
                return;
            }

            // Update cart count
            const cartCountElement = document.getElementById('cartCountBadge');
            const currentCount = parseInt(cartCountElement.textContent || 0);
            cartCountElement.textContent = currentCount + 1;
            cartCountElement.classList.remove('d-none');

            // Show success animation
            button.innerHTML = '<i class="fas fa-check me-1"></i>Added!';
            button.classList.remove('btn-primary');
            button.classList.add('btn-success');

            // Reset button after 2 seconds
            setTimeout(() => {
                btnText.classList.remove('d-none');
                btnLoading.classList.add('d-none');
                button.innerHTML = '<span class="btn-text"><i class="fas fa-shopping-cart me-1"></i>Add to Cart</span><span class="btn-loading d-none"><span class="spinner"></span>Adding...</span>';
                button.classList.remove('btn-success');
                button.classList.add('btn-primary');
                button.disabled = false;
            }, 2000);

        } catch (error) {
            console.error('Error adding to cart:', error);
            btnText.classList.remove('d-none');
            btnLoading.classList.add('d-none');
            button.disabled = false;
            alert('Error adding product to cart. Please try again.');
        }
    }

    function filterProducts() {
        const searchTerm = document.getElementById('searchInput').value.toLowerCase();
        const categoryFilter = document.getElementById('categoryFilter').value;
        const productItems = document.querySelectorAll('.product-item');
        let visibleCount = 0;

        productItems.forEach(item => {
            const name = item.dataset.name.toLowerCase();
            const category = item.dataset.category;
            
            const matchesSearch = name.includes(searchTerm);
            const matchesCategory = !categoryFilter || category === categoryFilter;
            
            if (matchesSearch && matchesCategory) {
                item.style.display = 'block';
                visibleCount++;
            } else {
                item.style.display = 'none';
            }
        });

        // Show/hide no products message
        const noProductsMessage = document.getElementById('noProductsMessage');
        if (visibleCount === 0) {
            noProductsMessage.classList.remove('d-none');
        } else {
            noProductsMessage.classList.add('d-none');
        }
    }

    function sortProducts() {
        const sortBy = document.getElementById('sortFilter').value;
        const container = document.getElementById('productsContainer');
        const items = Array.from(container.children);

        items.sort((a, b) => {
            switch (sortBy) {
                case 'name':
                    return a.dataset.name.localeCompare(b.dataset.name);
                case 'price-low':
                    return parseFloat(a.dataset.price) - parseFloat(b.dataset.price);
                case 'price-high':
                    return parseFloat(b.dataset.price) - parseFloat(a.dataset.price);
                default:
                    return 0;
            }
        });

        items.forEach(item => container.appendChild(item));
    }

    function viewProduct(productId) {
        // Quick view functionality
        const modal = new bootstrap.Modal(document.getElementById('productModal'));
        const modalContent = document.getElementById('modalContent');
        
        const product = allProducts.find(p => p.id === productId);
        if (product) {
            modalContent.innerHTML = `
                <div class="row">
                    <div class="col-md-6">
                        <img src="https://picsum.photos/400/400?random=${product.id}" class="img-fluid rounded" alt="${product.name}">
                    </div>
                    <div class="col-md-6">
                        <h3 class="fw-bold">${product.name}</h3>
                        <p class="text-muted">${product.category}</p>
                        <p>${product.description}</p>
                        <h4 class="text-primary fw-bold">$${product.price}</h4>
                        <button onclick="AddToCart('${product.id}')" class="btn btn-primary">
                            <i class="fas fa-shopping-cart me-1"></i>Add to Cart
                        </button>
                    </div>
                </div>
            `;
            modal.show();
        }
    }

    function addToWishlist(productId) {
        // Wishlist functionality (placeholder)
        const button = event.target;
        button.classList.toggle('far');
        button.classList.toggle('fas');
        button.classList.toggle('text-danger');
        
        if (button.classList.contains('fas')) {
            // Added to wishlist
            console.log('Added to wishlist:', productId);
        } else {
            // Removed from wishlist
            console.log('Removed from wishlist:', productId);
        }
    }

    function observeProducts() {
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('fade-in');
                }
            });
        }, { threshold: 0.1 });

        document.querySelectorAll('.product-card').forEach(card => {
            observer.observe(card);
        });
    }
</script>

<style>
    .product-card {
        transition: all 0.3s ease;
    }

    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 25px rgba(0,0,0,0.15) !important;
    }

    .overlay {
        background: rgba(0,0,0,0.7);
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .product-card:hover .overlay {
        opacity: 1;
    }

    .add-to-cart-btn {
        transition: all 0.3s ease;
    }

    .search-highlight {
        background-color: #fff3cd;
        padding: 2px 4px;
        border-radius: 3px;
    }
</style>